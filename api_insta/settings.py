"""
Django settings for api_insta project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from datetime import timedelta #JWTトークンを使う際、その期限を設定するため

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '93sz7=ro#_8a(_(wk)e2z5l1q71%8x#djos2gm&el68b9gp98-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
#以下追加部分
    'djoser',
    'api.apps.ApiConfig',#自作したアプリはこのパートで紐付けしていく
    'corsheaders',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #以下追加部分
    'corsheaders.middleware.CorsMiddleware',
]

CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000" #ReactのローカスホストのURL。これをすることで、Reactからアクセスが来たときにそれを許可する
]

ROOT_URLCONF = 'api_insta.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api_insta.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases


# 以下、認証に関するデフォルト設定
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES':[#PermissionClasssではView.pyでUserが見れる内容の範囲を指定する
        'rest_framework.permissions.IsAuthenticated',#JWTの認証に通ってログインしているUserのみに限定する処理

    ],
    'DEFAULT_AUTHENTICATION_CLASSES':[#認証はどンナ方法でやるかが、AuthentificationClass（ここ）。
        'rest_framework_simplejwt.authentication.JWTAuthentication',#JWTの認証に通った人のみに制限している
    ],#特定のView飲み見れるようにするには別途上書きの必要あり
}

#下記サードパーティーとしてインストールしたSimpleJWTについて記載
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES':('JWT',),#定型文としての記述
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),#Tokenの有効期限を60分で制限
}



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True

#!!!!!!ここ重要!!!!!!!!
AUTH_USER_MODEL = 'api.User'#（APIアプリの中の）#Djangoが指定しているUserMOでｌではなく、API のmodels.pyの中でカスタマイズしたUserModelを使うことをここで指定している


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/


STATIC_URL = '/static/'
#以下追加部分、#Avatar画像とか、投稿画像をどこにいれるかを指定する
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')#今回の「API_Insta」プロジェクト直下の「Media」フォルダ内に入れていくことを指定→ここで指定した後、実際に「Media」フォルダを作成する
MEDIA_URL = '/media/'#URLの最後に'media'とあると、さっき作成したMediaフォルダにつながることを指定

#上から来て個々まで来たら、makemigrationをターミナルで行う
# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#ここまで来たら、pythpn manage.py makemigrations → python manage.py migrations